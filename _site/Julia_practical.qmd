---
title: "A practical start to Julia, a statistician's feast"
format: html
editor: visual
---

Got feedback ? Email me [here](mailto:comptesaudrey@gmail.com)

### A practical start to Julia, a statistician's feast :

_disclaimer:
This document is creates from `.Rmd` and should not differ from a `Quarto`or `.Qmd`solution. The reason for this choice is that it renders in the same format as the rest of the pages in this website i.e. the toggle bars do not dissappear in the html output. Nonetheless I believe it is still worth the investment to learn the "markdown" way of writing Julia code._

The set up for Julia Language requires this R chunk here which loads `JuliaCall` package 2022)(https://github.com/Non-Contradiction/JuliaCall) a support to `.Rmd`.

The R set up
```{r, echo = TRUE}
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_engines$set(julia = JuliaCall::eng_juliacall)
```
The Julia set up
```{r, echo = FALSE, eval = TRUE}
# using Pkg
# Pkg.activate(".")
# Pkg.instantiate()
# using Turing, Distributions, StatsPlots, CSV, DataFrames
# using LogExpFunctions: logit
# import ForwardDiff
# using Distributions, StatsPlots, DataFrames, Turing, Survival
```

<!-- Thereafter, insert `{julia}` as Code chunk type and write Julia Lang right away! -->
<!-- ```{julia, echo = TRUE} -->
<!-- a = sqrt(2);  # the semicolon inhibits printing in a .jl file  -->
<!-- ``` -->
<!-- Now a probability problem. Loading relevant packages -->
<!-- ```{julia, echo = TRUE} -->
<!-- # Set the true probability of heads in a coin. -->
<!-- p_true = 0.5 -->
<!-- # Iterate from having seen 0 observations to 100 observations. -->
<!-- Ns = 0:100 -->
<!-- ``` -->

<!-- Setting seed -->
<!-- ```{Julia} -->
<!-- # Draw data from a Bernoulli distribution, i.e. draw heads or tails. -->
<!-- # Random.seed!(1989) -->
<!-- # data = rand(Bernoulli(p_true), last(Ns)) -->
<!-- ``` -->
